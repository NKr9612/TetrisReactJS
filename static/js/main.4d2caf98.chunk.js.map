{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useEtap.js","components/styles/StyledEtap.js","components/styles/StyledKomorka.js","components/Komorka.js","components/Etap.js","components/styles/StyledPokaz.js","components/Pokaz.js","components/PrzyciskStart.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createEtap","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapp","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useEtap","resetPlayer","useState","setEtap","rowsCleared","setRowsCleared","useEffect","updateEtap","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledEtap","props","height","width","StyledKomorka","type","React","memo","console","log","Etap","key","StyledPokaz","endGame","Pokaz","gameOver","text","StyledPrzyciskStart","button","PrzyciskStart","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","setStage","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,gC,mJCG9BC,EAAa,kBACxBC,MAAMC,KAAKD,MAHe,KAGM,kBAAMA,MAJb,IAIgCE,KAAK,CAAC,EAAG,cAEvDC,EAAiB,SAACC,EAAQC,EAAT,GAiB5B,IAjBwE,IAAvBC,EAAsB,EAAzBC,EAAaC,EAAY,EAAfC,EAiB/CA,EAAI,EAAGA,EAAIL,EAAOM,UAAUC,OAAQF,GAAK,EAChD,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAOM,UAAUD,GAAGE,OAAQJ,GAAK,EAEnD,GAA+B,IAA3BH,EAAOM,UAAUD,GAAGF,MAInBF,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,KAEzBH,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,IAGlD,UADFD,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,GAAO,IAG1D,OAAO,EAMf,OAAO,G,4eCvCF,IAAMO,EAAoBC,IAAOC,IAAV,IAGVC,KAKPC,EAAeH,IAAOC,IAAV,K,WCTZG,EAAa,CACxBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,WAE1BC,EAAG,CACDF,MAAO,CACL,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEdC,MAAO,gBAETE,EAAG,CACDH,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEbC,MAAO,eAETG,EAAG,CACDJ,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEXC,MAAO,gBAETI,EAAG,CACDL,MAAO,CACL,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,MAAO,gBAETK,EAAG,CACDN,MAAO,CACL,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAETC,MAAO,eAETM,EAAG,CACDP,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,IAEXC,MAAO,gBAETO,EAAG,CACDR,MAAO,CACL,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAETC,MAAO,gBAIEQ,EAAkB,WAC7B,IACMC,EADa,UAENC,KAAKC,MAAMD,KAAKE,SAFV,UAEgCtB,SACnD,OAAOO,EAAWY,IChEPI,EAAU,SAAC9B,EAAQ+B,GAAgB,MAErBC,mBAASrC,KAFY,mBAEvCM,EAFuC,KAEhCgC,EAFgC,OAGRD,mBAAS,GAHD,mBAGvCE,EAHuC,KAG1BC,EAH0B,KAoD9C,OA/CAC,qBAAU,WACRD,EAAe,GACf,IAWME,EAAa,SAACC,GAClB,IAAMC,EAAWD,EAAUE,KAAI,SAACC,GAAD,OAC7BA,EAAID,KAAI,SAACE,GAAD,MAAuB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAe1D,OAXA1C,EAAOM,UAAUqC,SAAQ,SAACF,EAAKpC,GAC7BoC,EAAIE,SAAQ,SAACC,EAAOzC,GACJ,IAAVyC,IACFL,EAASlC,EAAIL,EAAOQ,IAAIH,GAAGF,EAAIH,EAAOQ,IAAIL,GAAK,CAC7CyC,EAD6C,UAE1C5C,EAAO6C,SAAW,SAAW,iBAMpC7C,EAAO6C,UACTd,IA7Bc,SAACQ,GAAD,OAChBA,EAASO,QAAO,SAACC,EAAKN,GACpB,OAAgD,IAA5CA,EAAIO,WAAU,SAACN,GAAD,OAAsB,IAAZA,EAAK,OAC/BP,GAAe,SAACc,GAAD,OAAUA,EAAO,KAChCF,EAAIG,QAAQ,IAAItD,MAAM2C,EAAS,GAAGhC,QAAQT,KAAK,CAAC,EAAG,WAC5CiD,IAETA,EAAII,KAAKV,GACFM,KACN,IAqBMK,CAAUb,IAEZA,GAITN,GAAQ,SAACgB,GAAD,OAAUZ,EAAWY,QAC5B,CACDjD,EAAO6C,SACP7C,EAAOQ,IAAIL,EACXH,EAAOQ,IAAIH,EACXL,EAAOM,UACPyB,IAGK,CAAC9B,EAAOgC,EAASC,I,kUCtDnB,IAAMmB,EAAa3C,IAAOC,IAAV,KAGjB,SAAC2C,GAAD,OAAWA,EAAMC,UACL,SAACD,GAAD,OAAWA,EAAME,SAGD,SAACF,GAAD,OAAWA,EAAME,S,yTCP5C,IAAMC,EAAgB/C,IAAOC,IAAV,KAGL,SAAC2C,GAAD,OAAWA,EAAMrC,SAC1B,SAACqC,GAAD,OAA2B,IAAfA,EAAMI,KAAa,YAAc,eAC3B,SAACJ,GAAD,OAAWA,EAAMrC,SAClB,SAACqC,GAAD,OAAWA,EAAMrC,SACnB,SAACqC,GAAD,OAAWA,EAAMrC,SAChB,SAACqC,GAAD,OAAWA,EAAMrC,SCC9B0C,MAAMC,MANL,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAH,OACd,kBAACD,EAAD,CAAeC,KAAMA,EAAMzC,MAAOH,EAAW4C,GAAMzC,OAChD4C,QAAQC,IAAI,qBCOFC,EATF,SAAC,GAAD,IAAG9D,EAAH,EAAGA,MAAH,OACX,kBAACoD,EAAD,CAAYG,MAAOvD,EAAM,GAAGM,OAAQgD,OAAQtD,EAAMM,QAE/CN,EAAMuC,KAAI,SAACC,GAAD,OACTA,EAAID,KAAI,SAACE,EAAMvC,GAAP,OAAa,kBAAC,EAAD,CAAS6D,IAAK7D,EAAGuD,KAAMhB,EAAK,a,0XCPhD,IAAMuB,EAAcvD,IAAOC,IAAV,KAUb,SAAC2C,GAAD,OAAYA,EAAMY,QAAU,MAAQ,UCLhCC,EAJD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACZ,kBAACJ,EAAD,CAAaG,SAAUA,GAAWC,I,qXCDpC,IAAMC,EAAsB5D,IAAO6D,OAAV,KAqBVC,EAJO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,kBAACH,EAAD,CAAqBI,QAASD,GAA9B,sBC2GaE,EAhHA,WAAO,IAAD,EACa3C,mBAAS,MADtB,mBACZ4C,EADY,KACFC,EADE,OAEa7C,oBAAS,GAFtB,mBAEZoC,EAFY,KAEFU,EAFE,OCVI,WAAO,IAAD,EACD9C,mBAAS,CACnCxB,IAAK,CAAEL,EAAG,EAAGE,EAAG,GAChBC,UAAWQ,EAAW,GAAGE,MACzB6B,UAAU,IAJiB,mBACtB7C,EADsB,KACd+E,EADc,KAW7B,SAASC,EAAOC,EAAQC,GAEtB,IAAMC,EAAOF,EAAOzC,KAAI,SAAC4C,EAAGC,GAAJ,OACtBJ,EAAOzC,KAAI,SAAC8C,GAAD,OAAYA,EAAOD,SAGhC,OAAIH,EAAM,EAAUC,EAAK3C,KAAI,SAACC,GAAD,OAASA,EAAI8C,aACnCJ,EAAKI,UAqBd,IAQMxD,EAAcyD,uBAAY,WAC9BT,EAAU,CACRvE,IAAK,CAAEL,EAAGsF,EAAqBpF,EAAG,GAClCC,UAAWmB,IAAkBT,MAC7B6B,UAAU,MAEX,IAEH,MAAO,CAAC7C,EAhBgB,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,EAAGE,EAAkB,EAAlBA,EAAGwC,EAAe,EAAfA,SAC/BkC,GAAU,SAAC9B,GAAD,mBAAC,eACNA,GADK,IAERzC,IAAK,CAAEL,EAAI8C,EAAKzC,IAAIL,GAAKA,EAAIE,EAAI4C,EAAKzC,IAAIH,GAAKA,GAC/CwC,iBAY6Bd,EAlCjC,SAAsB9B,EAAOiF,GAC3B,IAAMQ,EAAeC,KAAKC,MAAMD,KAAKE,UAAU7F,IAC/C0F,EAAapF,UAAY0E,EAAOU,EAAapF,UAAW4E,GAIxD,IAFA,IAAM1E,EAAMkF,EAAalF,IAAIL,EACzB2F,EAAS,EACN/F,EAAe2F,EAAczF,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAGpD,GAFAqF,EAAalF,IAAIL,GAAK2F,GACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAC1BJ,EAAapF,UAAU,GAAGC,OAGrC,OAFAyE,EAAOU,EAAapF,WAAY4E,QAChCQ,EAAalF,IAAIL,EAAIK,GAIzBuE,EAAUW,KDtBiDK,GAJ1C,mBAIZ/F,EAJY,KAIJgG,EAJI,KAIajE,EAJb,KAI0BkE,EAJ1B,OAKoBnE,EAAQ9B,EAAQ+B,GALpC,mBAKZ9B,EALY,KAKLiG,EALK,OEdQ,SAAAhE,GAAgB,IAAD,EAChBF,mBAAS,GADO,mBACnCmE,EADmC,KAC5BC,EAD4B,OAElBpE,mBAAS,GAFS,mBAEnCqE,EAFmC,KAE7BC,EAF6B,OAGhBtE,mBAAS,GAHO,mBAGnCuE,EAHmC,KAG5BC,EAH4B,KAKpCC,EAAa,CAAC,GAAI,IAAK,IAAK,MAE5BC,EAAYlB,uBAAY,WAExBtD,EAAc,IAEhBkE,GAAS,SAAAnD,GAAI,OAAIA,EAAOwD,EAAWvE,EAAc,IAAMqE,EAAQ,MAC/DD,GAAQ,SAAArD,GAAI,OAAIA,EAAOf,QAExB,CAACqE,EAAOE,EAAYvE,IAMvB,OAJAE,qBAAU,WACRsE,MACC,CAACA,EAAWxE,EAAaiE,IAErB,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GFAWG,CANvC,yBAMZR,EANY,KAMLC,EANK,KAMKC,EANL,KAMWC,EANX,KAMoBC,EANpB,KAM2BC,EAN3B,KAUnB3C,QAAQC,IAAI,aAEZ,IAAM8C,EAAa,SAAC1B,GACbnF,EAAeC,EAAQC,EAAO,CAAEE,EAAG+E,EAAK7E,EAAG,KAC9C2F,EAAgB,CAAE7F,EAAG+E,EAAK7E,EAAG,KAwB3BwG,EAAO,WAEPR,EAAqB,IAAbE,EAAQ,KAClBC,GAAS,SAACvD,GAAD,OAAUA,EAAO,KAE1B4B,EAAY,KAAQ0B,EAAQ,GAAK,MAG9BxG,EAAeC,EAAQC,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAIxCL,EAAOQ,IAAIH,EAAI,IACjBwD,QAAQC,IAAI,cACZgB,GAAY,GACZD,EAAY,OAEdmB,EAAgB,CAAE7F,EAAG,EAAGE,EAAG,EAAGwC,UAAU,KARxCmD,EAAgB,CAAE7F,EAAG,EAAGE,EAAG,EAAGwC,UAAU,MG7DvC,SAAqB4B,EAAUqC,GACpC,IAAMC,EAAgBC,mBAEtB5E,qBAAU,WACR2E,EAAcE,QAAUxC,IACvB,CAACA,IAGJrC,qBAAU,WAIR,GAAc,OAAV0E,EAAgB,CAClB,IAAMI,EAAKC,aAJb,WACEJ,EAAcE,YAGeH,GAC7B,OAAO,WACLM,cAAcF,OAGjB,CAACJ,IH8DJO,EAAY,WACVR,MACCjC,GAEH,IAAM0C,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACTnD,IACa,KAAZmD,EACFX,GAAY,GACS,KAAZW,EACTX,EAAW,GACU,KAAZW,GAfb1C,EAAY,MACZgC,KAgByB,KAAZU,GACTtB,EAAahG,EAAO,KAK1B,OAEE,kBAACQ,EAAD,CACE+G,KAAK,SACLC,SAAS,IACTC,UAAW,SAACC,GAAD,OAAOL,EAAKK,IACvBC,QAxEU,SAAC,GAAiB,IAAfL,EAAc,EAAdA,QACVnD,GAEa,KAAZmD,GACF1C,EAAY,KAAQ0B,EAAQ,MAsE9B,kBAAC1F,EAAD,KACE,kBAAC,EAAD,CAAMZ,MAAOA,IACb,+BAEGmE,EACC,kBAAC,EAAD,CAAOA,SAAUA,EAAUC,KAAK,eAEhC,6BACE,kBAAC,EAAD,CAAOA,KAAI,iBAAY8B,KACvB,kBAAC,EAAD,CAAO9B,KAAI,mBAAcgC,KACzB,kBAAC,EAAD,CAAOhC,KAAI,iBAAYkC,MAG3B,kBAAC,EAAD,CAAe9B,SA9EL,WAEhByB,EAASvG,KACTkF,EAAY,KACZ9C,IACAqE,EAAS,GACTI,EAAS,GACTF,EAAQ,GACRxB,GAAY,UI1CD+C,EANH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCAJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4d2caf98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2428afe6.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createEtap = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, \"clear\"]));\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // Takie rozwiązanie też dziala\r\n  // return player.tetromino.some((row, y) =>\r\n  //   row.some((cell, x) => {\r\n  //     if (cell !== 0) {\r\n  //       return (\r\n  //         !stage[y + player.pos.y + moveY] ||\r\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n  //           'clear'\r\n  //       );\r\n  //     }\r\n  //     return false;\r\n  //   })\r\n  // );\r\n\r\n  // używanie pętli (nie działa forEach)\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Sprawdzanie, czy jesteśmy na odpowiednim klocku\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Sprawdzanie czy nasz ruch jest wewnątrz obszaru height (y)\r\n          // Tak, żeby nie przeszedł przez dno\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3.Sprawdzanie, czy ruch jest wewnątrz obszaru width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Sprawdzanie, czy komórka do której wędruje klocek nie jest wyczyszczona\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5.Jeśli wszystko jest fałszem\r\n  return false;\r\n};\r\n","import styled from \"styled-components\";\r\n// import obrazka\r\nimport bgImage from \"../../img/bg.png\";\r\n//rozmieszczenie elementów\r\nexport const StyledTetrisWrapp = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","// odpowiada za tworzenie klocka - tetromino\r\n//deklaracja klocka, jako obiektu\r\n//Kazda duza literka odpowiada innemu \"tetromino\", przykladowo I to podluzny klocek z 4 \"bloczkami\" wzdluz\r\nexport const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0, 0, 0\" },\r\n  //jak widać, przy użyciu tablic generuje wygląd klocka, użycie liter może być inne, najważniejsze jest sprawdzenie, czy w środku znajduje się string, czy też 0\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80, 227, 230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"36, 95, 223\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"223, 173, 36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"223, 217, 36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48, 211, 56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n    ],\r\n    color: \"132, 61, 198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227, 78, 78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n//importowanie \"createEtap\"\r\nimport { createEtap } from \"../gameHelpers\";\r\n\r\nexport const useEtap = (player, resetPlayer) => {\r\n  //przekazanie funkcji, jako argumentu oraz zainicjalizowanie etapu początkowego - czystej siatki\r\n  const [stage, setEtap] = useState(createEtap());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateEtap = (prevStage) => {\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      //rysowanie tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Sprawdzanie, czy mamy wynik po \"collided\"\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    //Aktualizacje\r\n    setEtap((prev) => updateEtap(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setEtap, rowsCleared];\r\n};\r\n","import styled from \"styled-components\";\r\n//stylowanie siatki\r\nexport const StyledEtap = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(25vw / ${(props) => props.width})\r\n  );\r\n  padding: 10px;\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #444;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledKomorka = styled.div`\r\n  width: auto;\r\n  /* border-radius: 5px; */\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.1);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledKomorka } from \"./styles/StyledKomorka\";\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Komorka = ({ type }) => (\r\n  <StyledKomorka type={type} color={TETROMINOS[type].color}>\r\n    {console.log(\"rerender cell\")}\r\n  </StyledKomorka>\r\n);\r\n\r\nexport default React.memo(Komorka);\r\n","import React from \"react\";\r\nimport { StyledEtap } from \"./styles/StyledEtap\";\r\n\r\nimport Komorka from \"./Komorka\";\r\n\r\nconst Etap = ({ stage }) => (\r\n  <StyledEtap width={stage[0].length} height={stage.length}>\r\n    {/* mapowanie nowej tablicy z wierszy i kolumn */}\r\n    {stage.map((row) =>\r\n      row.map((cell, x) => <Komorka key={x} type={cell[0]} />)\r\n    )}\r\n  </StyledEtap>\r\n);\r\n\r\nexport default Etap;\r\n","import styled from \"styled-components\";\r\n//stylowanie napisow wyswietlajacych\r\nexport const StyledPokaz = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid gray;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.endGame ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledPokaz } from \"./styles/StyledPokaz\";\r\n\r\nconst Pokaz = ({ gameOver, text }) => (\r\n  <StyledPokaz gameOver={gameOver}>{text}</StyledPokaz>\r\n);\r\n\r\nexport default Pokaz;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledPrzyciskStart = styled.button`\r\n  box-sizing: border-box;\r\n\r\n  margin: 20px 0 20px 0;\r\n  padding: 30px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: black;\r\n  background: gray;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1.2rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst PrzyciskStart = ({ callback }) => (\r\n  <StyledPrzyciskStart onClick={callback}>Zacznij grę!</StyledPrzyciskStart>\r\n);\r\n\r\nexport default PrzyciskStart;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createEtap, checkCollision } from \"../gameHelpers\";\r\nimport { StyledTetrisWrapp, StyledTetris } from \"./styles/StyledTetris\";\r\n\r\n// Wlasnie hook'i\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useEtap } from \"../hooks/useEtap\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\n// Komponenty\r\nimport Etap from \"./Etap\";\r\nimport Pokaz from \"./Pokaz\";\r\nimport PrzyciskStart from \"./PrzyciskStart\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  //korzystanie z hook'ów i metod z \"useEtap\" i \"usePlayer\"\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useEtap(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log(\"re-render\");\r\n  //funkcja odpowiadajaca za ruchy gracza\r\n  const movePlayer = (dir) => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n  //funkcja zaczynajaca gre\r\n  const startGame = () => {\r\n    //przy wywolywaniu tej funkcji wszystko się resetuje i zaczyna od nowa\r\n    setStage(createEtap());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n  // funkcja odpowiada za spadanie\r\n  const drop = () => {\r\n    //podnosi level, gdy gracz zdobędzie 10 wierszy\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      // zwieksza predkosc spadania klockow\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // tutaj nastepuje koniec gry\r\n      if (player.pos.y < 1) {\r\n        console.log(\"Koniec gry\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n  //funkcja odpowiadajaca za przyspieszenie klocka, pod wplywem nacisniecia strzalki w dol przez gracza\r\n  const dropPlayer = () => {\r\n    //nastepuje dezaktywowanie interwału, przy przytrzymanym klawiszu\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  //zaczecie gry, hook stworzony przez \"Dan Abramov\"\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n  //funkcja obslugujaca przyciski\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    //tworzenie struktury aplikacji\r\n    <StyledTetrisWrapp\r\n      role='button'\r\n      tabIndex='0'\r\n      onKeyDown={(e) => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Etap stage={stage} />\r\n        <aside>\r\n          {/* instrukcja warunkowa sprawdzająca, czy gra jest skonczona */}\r\n          {gameOver ? (\r\n            <Pokaz gameOver={gameOver} text='Koniec gry' />\r\n          ) : (\r\n            <div>\r\n              <Pokaz text={`Wynik: ${score}`} />\r\n              <Pokaz text={`Wiersze: ${rows}`} />\r\n              <Pokaz text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <PrzyciskStart callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapp>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","//importowaniee hook \"useState\" z reacta, dzięki czemu mozna korzystac ze stanu, oraz \"useCallback\"\r\nimport { useState, useCallback } from \"react\";\r\n//importowanie funkcji losującej klocek\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n    //będzie się odbywało po kolei to:\r\n    // const graczState = useState();\r\n    // const gracz = graczState[0];\r\n    // const setGracz = graczState[1];\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n    // Zmienianie wierszy na kolumny\r\n    const mtrx = matrix.map((_, index) =>\r\n      matrix.map((column) => column[index])\r\n    );\r\n    // odwrocenie kazdego wiersza\r\n    if (dir > 0) return mtrx.map((row) => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // Tu wynik\r\n    if (rowsCleared > 0) {\r\n      \r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Zapamiętuje ostatni callback\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Ustawia interwał\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport Tetris from \"./components/Tetris\";\r\n// Komponent łączący\r\nconst App = () => (\r\n  <div className='App'>\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}